import os
import requests
import openai
from datetime import datetime, timedelta

# API-–∫–ª—é—á–∏
NEWS_API_KEY = os.getenv("NEWS_API_KEY") or os.getenv("NEWSAPI_KEY")
openai.api_key = os.getenv("OPENAI_API_KEY")

# –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ –ª–æ–≥–∏
if openai.api_key:
    print(f"üîë OpenAI –∫–ª—é—á –∑–∞–≥—Ä—É–∂–µ–Ω: {openai.api_key[:8]}...")
else:
    print("‚ùå OpenAI –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω!")

if NEWS_API_KEY:
    print(f"üóûÔ∏è NewsAPI –∫–ª—é—á –∑–∞–≥—Ä—É–∂–µ–Ω: {NEWS_API_KEY[:8]}...")
else:
    print("‚ùå NEWS_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω!")

def fetch_news_for_ticker(ticker, max_articles=3):
    if not NEWS_API_KEY:
        print("‚ùå NEWS_API_KEY –Ω–µ –∑–∞–¥–∞–Ω.")
        return []

    url = "https://newsapi.org/v2/everything"
    params = {
        "q": ticker,
        "language": "en",
        "pageSize": max_articles,
        "sortBy": "publishedAt",
        "apiKey": NEWS_API_KEY,
        "from": (datetime.utcnow() - timedelta(days=2)).strftime('%Y-%m-%d'),
    }

    try:
        response = requests.get(url, params=params)
        response.raise_for_status()
        data = response.json()

        if data.get("status") != "ok":
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç NewsAPI: {data}")
            return []

        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(data.get('articles', []))} –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ {ticker}")
        return data.get("articles", [])
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        return []

def ai_analyze_news(article):
    try:
        title = article.get("title") or ""
        description = article.get("description") or ""
        content = f"{title}\n\n{description}"

        if not content.strip():
            return "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."

        prompt = (
            f"–ü—Ä–æ—á—Ç–∏ —Å–ª–µ–¥—É—é—â—É—é –Ω–æ–≤–æ—Å—Ç—å –∏ —Å–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑:\n"
            f"1. –û—Å–Ω–æ–≤–Ω–æ–π —Å–º—ã—Å–ª.\n"
            f"2. –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å (–ø–æ–∑–∏—Ç–∏–≤–Ω–∞—è, –Ω–µ–≥–∞—Ç–∏–≤–Ω–∞—è, –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è).\n"
            f"3. –¢–∏–ø –Ω–æ–≤–æ—Å—Ç–∏ (—Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è, –ø—Ä–æ–¥—É–∫—Ç–æ–≤–∞—è, —Å—É–¥–µ–±–Ω–∞—è, —Ä—ã–Ω–æ–∫ –∏ —Ç.–¥.).\n"
            f"4. –ù–∞—Å–∫–æ–ª—å–∫–æ —Å–∏–ª—å–Ω–æ –æ–Ω–∞ –ø–æ–≤–ª–∏—è–µ—Ç –Ω–∞ —Ü–µ–Ω—É –∞–∫—Ü–∏–π?\n"
            f"5. –ö—Ä–∞—Ç–∫–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è (–ø–æ–∫—É–ø–∞—Ç—å / –¥–µ—Ä–∂–∞—Ç—å / –ø—Ä–æ–¥–∞–≤–∞—Ç—å).\n\n"
            f"–¢–µ–∫—Å—Ç:\n\"{content}\"\n\n–û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ –∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ:"
        )

        print(f"[AI prompt] {prompt[:200]}...")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª–æ –∑–∞–ø—Ä–æ—Å–∞

        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",  # –ò—Å–ø–æ–ª—å–∑—É–π gpt-4 –µ—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7,
            max_tokens=300
        )

        result = response['choices'][0]['message']['content'].strip()
        print(f"[AI result] {result[:200]}")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        return result

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ AI-–∞–Ω–∞–ª–∏–∑–∞: {e}")
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–∏."
