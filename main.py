import logging
import os
import json
import requests
import threading
from datetime import datetime
from flask import Flask, request
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Dispatcher, CommandHandler, CallbackContext, MessageHandler, Filters, CallbackQueryHandler
from apscheduler.schedulers.background import BackgroundScheduler
from openai import OpenAI
from news_handler import handle_news, ai_analyze_news
from undervalued_stocks import analyze_undervalued_stocks_by_indicators

# --- –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–ï ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø ---
TELEGRAM_API_KEY = os.getenv("TELEGRAM_API_KEY")
RENDER_EXTERNAL_HOSTNAME = os.getenv("RENDER_EXTERNAL_HOSTNAME")
PORT = int(os.getenv("PORT", 10000))

if not TELEGRAM_API_KEY or not RENDER_EXTERNAL_HOSTNAME:
    raise ValueError("‚ùå –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏—Ç–µ TELEGRAM_API_KEY –∏ RENDER_EXTERNAL_HOSTNAME –≤ .env")

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ---
app = Flask(__name__)
bot = Bot(token=TELEGRAM_API_KEY)
dispatcher = Dispatcher(bot, None, workers=1, use_context=True)
favorites = {}  # –ü–∞–º—è—Ç—å: {user_id: [tickers]}

# --- –ö–û–ú–ê–ù–î–´ ---
def start(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    keyboard = [
        [InlineKeyboardButton("üì∞ –ù–æ–≤–æ—Å—Ç–∏", callback_data="news")],
        [InlineKeyboardButton("üìå –î–æ–±–∞–≤–∏—Ç—å —Ç–∏–∫–µ—Ä", callback_data="add")],
        [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–∏–∫–µ—Ä", callback_data="remove")],
        [InlineKeyboardButton("‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data="favorites")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

def handle_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = query.from_user.id
    query.answer()

    if query.data == "news":
        tickers = favorites.get(user_id, [])
        if not tickers:
            query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç —Ç–∏–∫–µ—Ä–æ–≤. –î–æ–±–∞–≤—å—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
            return
        for ticker in tickers:
            send_news_analysis(user_id, ticker)

    elif query.data == "add":
        context.bot.send_message(chat_id=query.message.chat_id, text="–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:")
        context.user_data['awaiting_add'] = True

    elif query.data == "remove":
        user_favs = favorites.get(user_id, [])
        if not user_favs:
            context.bot.send_message(chat_id=query.message.chat_id, text="–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
            return
        keyboard = [[InlineKeyboardButton(t, callback_data=f"remove_{t}")] for t in user_favs]
        context.bot.send_message(chat_id=query.message.chat_id, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–∫–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data == "favorites":
        favs = favorites.get(user_id, [])
        if favs:
            context.bot.send_message(chat_id=query.message.chat_id, text="‚≠ê –í–∞—à–∏ —Ç–∏–∫–µ—Ä—ã: " + ", ".join(favs))
        else:
            context.bot.send_message(chat_id=query.message.chat_id, text="–°–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É—Å—Ç.")

    elif query.data.startswith("remove_"):
        ticker = query.data.replace("remove_", "")
        favorites[user_id].remove(ticker)
        context.bot.send_message(chat_id=query.message.chat_id, text=f"–£–¥–∞–ª—ë–Ω: {ticker}")


def text_handler(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    text = update.message.text.upper()

    if context.user_data.get('awaiting_add'):
        context.user_data['awaiting_add'] = False
        favorites.setdefault(user_id, []).append(text)
        update.message.reply_text(f"‚úÖ {text} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.")
    else:
        send_news_analysis(user_id, text)

# --- –ê–ù–ê–õ–ò–ó –ù–û–í–û–°–¢–ï–ô ---
def send_news_analysis(user_id: int, ticker: str):
    try:
        raw_news = handle_news(ticker)
        if not raw_news:
            bot.send_message(chat_id=user_id, text=f"–ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ {ticker}")
            return

        for news in raw_news[:3]:
            summary, tone, category, impact, recommendation, historical_reaction = ai_analyze_news(news, ticker)
            bot.send_message(chat_id=user_id, text=f"üì∞ {news['title']}\n\nüí¨ {summary}\nüìä –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\nüé≠ –¢–æ–Ω: {tone}\nüî• –í–ª–∏—è–Ω–∏–µ: {impact}\nüìà –†–µ–∞–∫—Ü–∏—è –≤ –ø—Ä–æ—à–ª–æ–º: {historical_reaction}\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {recommendation}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        bot.send_message(chat_id=user_id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –Ω–æ–≤–æ—Å—Ç–µ–π.")

# --- –ï–ñ–ï–ù–ï–î–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ê–ö–¶–ò–ô ---
def send_weekly_undervalued():
    try:
        result = analyze_undervalued_stocks_by_indicators()
        for user_id in favorites:
            if result:
                bot.send_message(chat_id=user_id, text="üìâ –ù–µ–¥–æ–æ—Ü–µ–Ω—ë–Ω–Ω—ã–µ –∞–∫—Ü–∏–∏ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ:")
                for stock in result:
                    bot.send_message(chat_id=user_id, text=stock)
            else:
                bot.send_message(chat_id=user_id, text="–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ –∞–∫—Ü–∏–π: {e}")

# --- –ü–ï–†–ò–û–î–ò–ß–ï–°–ö–ò–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ---
def send_scheduled_news():
    for user_id, tickers in favorites.items():
        for ticker in tickers:
            send_news_analysis(user_id, ticker)

# --- WEBHOOK ---
@app.route(f"/{TELEGRAM_API_KEY}", methods=["POST"])
def webhook():
    update = Update.de_json(request.get_json(force=True), bot)
    dispatcher.process_update(update)
    return "OK"

@app.route("/")
def home():
    return "OK"

# --- –ó–ê–ü–£–°–ö ---
if __name__ == '__main__':
    bot.delete_webhook()
    webhook_url = f"https://{RENDER_EXTERNAL_HOSTNAME}/{TELEGRAM_API_KEY}"
    bot.set_webhook(webhook_url)
    logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")

    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CallbackQueryHandler(handle_callback))
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, text_handler))

    scheduler = BackgroundScheduler()
    scheduler.add_job(send_scheduled_news, 'interval', hours=4)
    scheduler.add_job(send_weekly_undervalued, 'cron', day_of_week='mon', hour=10)
    scheduler.start()

    app.run(host='0.0.0.0', port=PORT)
