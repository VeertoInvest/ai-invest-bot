import os
import logging
from flask import Flask, request
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Dispatcher, CommandHandler, MessageHandler, Filters, CallbackContext, CallbackQueryHandler
from apscheduler.schedulers.background import BackgroundScheduler
from news_handler import fetch_news_for_ticker, ai_analyze_news
from undervalued_stocks import weekly_undervalued_stocks_search
from memory import add_favorite, remove_favorite, get_favorites

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TELEGRAM_API_KEY")
PORT = int(os.environ.get("PORT", 10000))
HOST = os.getenv("RENDER_EXTERNAL_HOSTNAME")

if not TOKEN or not HOST:
    raise ValueError("TELEGRAM_API_KEY –∏ RENDER_EXTERNAL_HOSTNAME –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

bot = Bot(token=TOKEN)
app = Flask(__name__)
dispatcher = Dispatcher(bot, None, workers=1, use_context=True)

# –ö–æ–º–∞–Ω–¥—ã

def start(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("AAPL", callback_data='ticker_AAPL')],
        [InlineKeyboardButton("MSFT", callback_data='ticker_MSFT')],
        [InlineKeyboardButton("GOOG", callback_data='ticker_GOOG')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏ —Ç–∏–∫–µ—Ä –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:",
        reply_markup=reply_markup
    )

def favorites(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    favs = get_favorites(user_id)
    if favs:
        update.message.reply_text("–í–∞—à–∏ –ª—é–±–∏–º—ã–µ —Ç–∏–∫–µ—Ä—ã: " + ", ".join(favs))
    else:
        update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ª—é–±–∏–º—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –∫–Ω–æ–ø–∫–∏.")

def delete(update: Update, context: CallbackContext):
    if context.args:
        ticker = context.args[0].upper()
        removed = remove_favorite(update.effective_user.id, ticker)
        if removed:
            update.message.reply_text(f"–£–¥–∞–ª—ë–Ω —Ç–∏–∫–µ—Ä {ticker} –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.")
        else:
            update.message.reply_text(f"–¢–∏–∫–µ—Ä {ticker} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º.")
    else:
        update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ —Ç–∏–∫–µ—Ä: /delete TICKER")

def analyze(update: Update, context: CallbackContext):
    if context.args:
        ticker = context.args[0].upper()
        articles = fetch_news_for_ticker(ticker)
        if not articles:
            update.message.reply_text(f"–ù–µ—Ç —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ {ticker}.")
            return
        add_favorite(update.effective_user.id, ticker)
        for article in articles[:3]:
            analysis = ai_analyze_news(article)
            update.message.reply_text(analysis)
    else:
        update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ —Ç–∏–∫–µ—Ä: /analyze TICKER")

def weekly(update: Update, context: CallbackContext):
    update.message.reply_text("–ò—â—É –Ω–µ–¥–æ–æ—Ü–µ–Ω—ë–Ω–Ω—ã–µ –∞–∫—Ü–∏–∏...")
    result = weekly_undervalued_stocks_search()
    if result:
        for item in result:
            update.message.reply_text(item)
    else:
        update.message.reply_text("–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

def handle_buttons(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    if query.data.startswith("ticker_"):
        ticker = query.data.split("_")[1]
        update.effective_chat.send_message(f"–ó–∞–ø—É—Å–∫–∞—é –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ {ticker}...")
        articles = fetch_news_for_ticker(ticker)
        if not articles:
            query.edit_message_text(f"–ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ {ticker}")
            return
        add_favorite(query.from_user.id, ticker)
        for article in articles[:3]:
            summary = ai_analyze_news(article)
            update.effective_chat.send_message(summary)

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
scheduler = BackgroundScheduler()

def send_periodic_news():
    for user_id, tickers in get_favorites().items():
        for ticker in tickers:
            articles = fetch_news_for_ticker(ticker)
            for article in articles[:1]:
                summary = ai_analyze_news(article)
                bot.send_message(chat_id=user_id, text=f"üìà {ticker}: {summary}")

scheduler.add_job(send_periodic_news, 'interval', hours=4)
scheduler.start()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤

dispatcher.add_handler(CommandHandler("start", start))
dispatcher.add_handler(CommandHandler("favorites", favorites))
dispatcher.add_handler(CommandHandler("delete", delete))
dispatcher.add_handler(CommandHandler("analyze", analyze))
dispatcher.add_handler(CommandHandler("weekly", weekly))
dispatcher.add_handler(CallbackQueryHandler(handle_buttons))

# Webhook endpoint
@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    update = Update.de_json(request.get_json(force=True), bot)
    dispatcher.process_update(update)
    return "ok"

@app.route("/")
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

if __name__ == "__main__":
    bot.set_webhook(f"https://{HOST}/{TOKEN}")
    logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: https://{HOST}/{TOKEN}")
    app.run(host="0.0.0.0", port=PORT)
