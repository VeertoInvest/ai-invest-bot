import os
import logging
import threading
import time
import schedule
from flask import Flask, request
from telegram import Bot, Update
from telegram.ext import Dispatcher, CommandHandler
from news_handler import handle_news
from undervalued_stocks import analyze_undervalued_stocks
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackQueryHandler

def tickers_command(update, context):
    keyboard = [
        [InlineKeyboardButton("AAPL", callback_data="news_AAPL"),
         InlineKeyboardButton("MSFT", callback_data="news_MSFT")],
        [InlineKeyboardButton("GOOGL", callback_data="news_GOOGL"),
         InlineKeyboardButton("AMZN", callback_data="news_AMZN")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–∫–µ—Ä:", reply_markup=reply_markup)

def button_callback(update, context):
    query = update.callback_query
    query.answer()

    if query.data.startswith("news_"):
        ticker = query.data.split("_")[1]
        query.edit_message_text(f"üîç –ù–æ–≤–æ—Å—Ç–∏ –ø–æ {ticker}...")
        articles = fetch_news_for_ticker(ticker)
        if articles:
            for article in articles:
                context.bot.send_message(chat_id=query.message.chat.id, text=article)
        else:
            context.bot.send_message(chat_id=query.message.chat.id, text="‚ùå –ù–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

dispatcher.add_handler(CommandHandler("tickers", tickers_command))
dispatcher.add_handler(CallbackQueryHandler(button_callback))


# üîß –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# üìå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TELEGRAM_API_KEY")
if not TOKEN:
    raise ValueError("‚ùå TELEGRAM_API_KEY is not set")

bot = Bot(token=TOKEN)
app = Flask(__name__)
dispatcher = Dispatcher(bot=bot, update_queue=None, workers=1, use_context=True)

# üìå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è chat_id
last_chat_id = None

from news_handler import fetch_news_for_ticker  # –¥–æ–±–∞–≤–∏–º —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é

def news_command(update, context):
    user_input = context.args
    if not user_input:
        update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä, –Ω–∞–ø—Ä–∏–º–µ—Ä: /news AAPL")
        return

    ticker = user_input[0].upper()
    update.message.reply_text(f"üîç –ò—â—É –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ {ticker}...")

    articles = fetch_news_for_ticker(ticker)
    if not articles:
        update.message.reply_text("‚ùå –ù–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    for article in articles:
        update.message.reply_text(article)

# üìç –ö–æ–º–∞–Ω–¥–∞ /start
def start(update, context):
    global last_chat_id
    last_chat_id = update.effective_chat.id
    logging.info(f"User {update.effective_user.id} sent /start")
    context.bot.send_message(chat_id=last_chat_id,
                             text="–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –Ω–µ–¥–æ–æ—Ü–µ–Ω—ë–Ω–Ω—ã—Ö –∞–∫—Ü–∏–π.")

# üìç –ö–æ–º–∞–Ω–¥–∞ /news
def news(update, context):
    logging.info(f"User {update.effective_user.id} sent /news")
    articles = handle_news()
    if articles:
        for article in articles:
            if article.strip():
                context.bot.send_message(chat_id=update.effective_chat.id, text=article)
    else:
        context.bot.send_message(chat_id=update.effective_chat.id, text="–ù–µ—Ç —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.")

# üìç –ö–æ–º–∞–Ω–¥–∞ /undervalued
def undervalued(update, context):
    logging.info(f"User {update.effective_user.id} sent /undervalued")
    tickers = ["AAPL", "MSFT", "GOOG"]
    results = analyze_undervalued_stocks(tickers)
    if results:
        for stock, pe in results:
            context.bot.send_message(chat_id=update.effective_chat.id, text=f"{stock} —Å P/E {pe}")
    else:
        context.bot.send_message(chat_id=update.effective_chat.id, text="–ù–µ—Ç –Ω–µ–¥–æ–æ—Ü–µ–Ω—ë–Ω–Ω—ã—Ö –∞–∫—Ü–∏–π.")

# üïí –†–∞—Å—Å—ã–ª–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞
def send_news_job():
    if last_chat_id:
        logging.info("üì® –ê–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π")
        articles = handle_news()
        for article in articles:
            if article.strip():
                bot.send_message(chat_id=last_chat_id, text=article)
    else:
        logging.warning("‚ö†Ô∏è –ù–µ—Ç chat_id –¥–ª—è –∞–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∏")

# üïì –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
schedule.every(4).hours.do(send_news_job)

def run_scheduler():
    while True:
        schedule.run_pending()
        time.sleep(60)

threading.Thread(target=run_scheduler, daemon=True).start()

# üìç –†–æ—É—Ç Webhook'–∞
@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    update = Update.de_json(request.get_json(force=True), bot)
    dispatcher.process_update(update)
    return "OK", 200

# üìç –†–æ—É—Ç –¥–ª—è Render'–∞
@app.route("/", methods=["GET"])
def root():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!", 200

# üéØ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
dispatcher.add_handler(CommandHandler("start", start))
dispatcher.add_handler(CommandHandler("news", news))
dispatcher.add_handler(CommandHandler("undervalued", undervalued))

# üì° –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Webhook –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
if __name__ == "__main__":
    webhook_url = f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/{TOKEN}"
    bot.delete_webhook()
    bot.set_webhook(url=webhook_url)
    logging.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
    app.run(host="0.0.0.0", port=10000)
